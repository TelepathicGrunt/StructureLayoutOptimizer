plugins {
    id 'fabric-loom'
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings(loom.layered {
        it.officialMojangMappings()
        it.parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_mappings_version}@zip")
    })
    compileOnly "org.ow2.asm:asm:${project.asm_version}"
    compileOnly "org.ow2.asm:asm-analysis:${project.asm_version}"
    compileOnly "org.ow2.asm:asm-commons:${project.asm_version}"
    compileOnly "org.ow2.asm:asm-tree:${project.asm_version}"
    compileOnly "org.ow2.asm:asm-util:${project.asm_version}"

    compileOnly "org.spongepowered:mixin:${project.mixin_version}"
    compileOnly "io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}"
    annotationProcessor "io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}"

    modCompileOnly("me.shedaniel.cloth:cloth-config:${project.cloth_config_version}") {
        exclude group: 'net.fabricmc'
    }
}

loom {
    mods {
        "${mod_id}" {
            // Tell Loom about each source set used by your mod here. This ensures that your mod's classes are properly transformed by Loader.
            sourceSet sourceSets.main
        }
    }

    def awFile = project.file("src/main/resources/${mod_id}.accesswidener")
    if (awFile.exists()) {
        accessWidenerPath.set(awFile)
    }

    mixin {
        useLegacyMixinAp = false
    }

    runs {
        configureEach {
            ideConfigGenerated(false)
        }
    }
}
