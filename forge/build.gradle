plugins {
    id 'net.neoforged.moddev.legacyforge' version '2.0.65-beta'
}

repositories {
    maven { url = 'https://maven.fabricmc.net' }
}

dependencies {
    compileOnly(project(':common')) {
        transitive = false
    }

    annotationProcessor 'net.fabricmc:sponge-mixin:0.13.0+mixin.0.8.5'
    annotationProcessor "io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}"
    compileOnly("io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}")
    implementation("io.github.llamalad7:mixinextras-forge:${project.mixin_extras_version}")
    jarJar("io.github.llamalad7:mixinextras-forge:${project.mixin_extras_version}")

    modImplementation "com.teamresourceful.resourcefulconfig:resourcefulconfig-forge-${project.resourceful_config_minecraft_version}:${project.resourceful_config_version}"
}

publishMods {
    file = tasks.jar.archiveFile
    modLoaders.add("forge")

    File changeLog = rootProject.file("CHANGELOG.md")
    String changeLogText = changeLog.exists() ? changeLog.text : ""

    def uploadDependenciesCf = [
            'resourceful-config': true
    ]
    def uploadDependenciesMr = [
            'resourceful-config': true
    ]

    if (project.hasProperty('curseforge_id')) {
        curseforge('CurseforgeForge') {

            accessToken = providers.environmentVariable('CURSEFORGEKEY')
            projectId = project.findProperty('curseforge_id')
            minecraftVersions.add(project.minecraft_version)
            changelog = changeLogText

            uploadDependenciesCf.each { dep, required ->
                if (required) {
                    requires(dep)
                } else {
                    optional(dep)
                }
            }
        }
    }

    if (project.hasProperty('modrinth_id')) {
        modrinth('modrinthForge') {
            accessToken = accessToken = providers.environmentVariable('MODRINTH_TOKEN')
            projectId = project.findProperty('modrinth_id')
            minecraftVersions.add(project.minecraft_version)
            changelog = changeLogText

            dependencies {
                uploadDependenciesMr.each { dep, required ->
                    if (required) {
                        requires(dep)
                    } else {
                        optional(dep)
                    }
                }
            }
        }
    }
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
}

legacyForge {
    version = "${project.minecraft_version}-${project.forge_version}"

    runs {
        client {
            client()
            systemProperty 'mixin.env.remapRefMap', 'true'
            systemProperty 'mixin.env.refMapRemappingFile', project.layout.buildDirectory.get().file('createSrgToMcp/output.srg').asFile.absolutePath
            systemProperty 'forge.logging.markers', 'REGISTRIES'
        }

        server {
            server()
            systemProperty 'mixin.env.remapRefMap', 'true'
            systemProperty 'mixin.env.refMapRemappingFile', project.layout.buildDirectory.get().file('createSrgToMcp/output.srg').asFile.absolutePath
            systemProperty 'forge.logging.markers', 'REGISTRIES'
        }
    }
    mods {
        modServerRun {
            sourceSet sourceSets.main
            sourceSet project(":common").sourceSets.main
        }
    }
}

tasks.named("compileJava", JavaCompile) {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("javadoc", Javadoc) {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar {
    manifest {
        attributes([
                "MixinConfigs": "${project.mod_id}.mixins.json"
        ])
    }
}

publishing {
    publications {
        "mavenJava"(MavenPublication) {
            from components.java
        }
    }
}